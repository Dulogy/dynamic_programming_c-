// minCostPath_dp

#include<iostream>
#include<climits>
#include<cmath>
using namespace std;
int minCostDp(int **input,int m,int n){
  int **output ;
    output = new int *[m] ;
    for(int i = 0; i < m; i++){
        output[i] = new int [n] ;
    }

    output[m-1][n-1] = input[m-1][n-1] ;
    for(int j = n-2; j >= 0; j--){
        output[m-1][j] = output[m-1][j+1] + input[m-1][j] ;
    }
    for(int j = m-2; j >= 0; j--){
        output[j][n-1] = input[j][n-1] + output[j+1][n-1] ;
    }
    for(int i = m-2; i >= 0; i--){
        for(int j = n-2; j >= 0; j--){
            output[i][j] = input[i][j] + min(output[i][j+1],min(output[i+1][j+1],output[i+1][j])) ;
        }
    }
    return output[0][0] ;
  
}
int main(){
        int m ,n ;
    cout << "enter row and column : ";
    cin >> m >> n;
    int **a ;
    a = new int *[m] ;
    for(int i = 0; i < m; i++){
        a[i] = new int [n] ;
    }
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            cin >> a[i][j] ;
        }
    }

    cout << minCostDp(a,m,n) ;
    for(int i = 0; i < m; i++){
        delete [] a[i] ;
    }
    delete [] a ;

}
